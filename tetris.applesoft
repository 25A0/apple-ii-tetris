NEW
  10 REM TETRIS
  11 REM
  12 REM MAIN      1000
  13 REM FUNCTIONS  600
  14 REM VARIABLES  500
  15 REM SUBS      1500
  16 REM DATA       700

 500 REM VARIABLES
 501
 502 REM KEY     last pressed key
 503 REM BLOCK   block shape
 504 REM BX      block x position
 505 REM BY      block y position
 506 REM MASK    1 if drawing, 0 if clearing
 507 REM BS      block shapes
 508 DIM BS(19,2,1): REM position of cubes per shape. block position is always
 509 REM covered. all shapes have three additional cubes, represented by two integers
 510 REM BC      mapping for clockwise rotation
 511 DIM BC(19)
 512 REM BX      mapping for counter-clockwise rotation
 513 DIM BX(19)
 514 REM CL      mapping from shape to colour
 515 DIM CL(19)
 516 REM COL     result of the last collision check. 1 for collision, 0 for free
 517 REM OCC     grid keeping track of occupied cells.
 518 REM         this grid has an extra row and column for the edges,
 519 REM         which are initialized to 1
 520 DIM OCC(11,21)
 521 REM FILL    number of filled cells per row
 522 DIM FILL(20)
 523 REM SCR   score
 524 REM PNTS  mapping from number of rows cleared to points awarded
 525 DIM PNTS(4)
 526 REM NBLOCK  shape of the next block

 600 REM FUNCTIONS
 601 REM compute grid x coordinate for column c
 602 def fn gx(c) = 14 + c
 603 REM compute grid y coordinate for row r
 604 def fn gy(r) = 12 + r

 700 REM DATA
 701 REM mapping for clockwise rotation
 702 data 0, 8, 11, 3, 12, 15, 18, 19, 9, 10, 1, 2, 13, 14, 4, 16, 17, 5, 6, 7
 703 for i=0 to 19: read bc(i): next
 704 REM mapping for counter-clockwise rotation
 705 data 0, 10, 11, 3, 14, 17, 18, 19, 1, 8, 9, 2, 4, 12, 13, 5, 15, 16, 6, 7
 706 for i=0 to 19: read bx(i): next
 707 REM shapes
 708 A = 0 : B = 1 : C = 2 : X = 0 : Y = 1

 710 REM shape 1
 711 bs(1, A, X) =  0 : bs(1, A, Y) = -1
 712 bs(1, B, X) = -1 : bs(1, B, Y) =  0
 713 bs(1, C, X) =  1 : bs(1, C, Y) =  0

 720 REM shape 2
 721 bs(2, A, X) = -1 : bs(2, A, Y) =  0
 722 bs(2, B, X) =  1 : bs(2, B, Y) =  0
 723 bs(2, C, X) =  2 : bs(2, C, Y) =  0

 730 REM shape 3
 731 bs(3, A, X) =  1 : bs(3, A, Y) =  0
 732 bs(3, B, X) =  0 : bs(3, B, Y) =  1
 733 bs(3, C, X) =  1 : bs(3, C, Y) =  1

 740 REM shape 4
 741 bs(4, A, X) =  0 : bs(4, A, Y) = -1
 742 bs(4, B, X) = -1 : bs(4, B, Y) =  1
 743 bs(4, C, X) =  0 : bs(4, C, Y) =  1

 750 REM shape 5
 751 bs(5, A, X) =  0 : bs(5, A, Y) = -1
 752 bs(5, B, X) =  0 : bs(5, B, Y) =  1
 753 bs(5, C, X) =  1 : bs(5, C, Y) =  1

 760 REM shape 6
 761 bs(6, A, X) =  0 : bs(6, A, Y) = -1
 762 bs(6, B, X) =  1 : bs(6, B, Y) = -1
 763 bs(6, C, X) = -1 : bs(6, C, Y) =  0

 770 REM shape 7
 771 bs(7, A, X) = -1 : bs(7, A, Y) = -1
 772 bs(7, B, X) =  0 : bs(7, B, Y) = -1
 773 bs(7, C, X) =  1 : bs(7, C, Y) =  0

 780 REM shape 8
 781 bs(8, A, X) =  0 : bs(8, A, Y) = -1
 782 bs(8, B, X) =  1 : bs(8, B, Y) =  0
 783 bs(8, C, X) =  0 : bs(8, C, Y) =  1

 790 REM shape 9
 791 bs(9, A, X) = -1 : bs(9, A, Y) =  0
 792 bs(9, B, X) =  1 : bs(9, B, Y) =  0
 793 bs(9, C, X) =  0 : bs(9, C, Y) =  1

 800 REM shape 10
 801 bs(10, A, X) =  0 : bs(10, A, Y) = -1
 802 bs(10, B, X) = -1 : bs(10, B, Y) =  0
 803 bs(10, C, X) =  0 : bs(10, C, Y) =  1

 810 REM shape 11
 811 bs(11, A, X) =  0 : bs(11, A, Y) = -1
 812 bs(11, B, X) =  0 : bs(11, B, Y) =  1
 813 bs(11, C, X) =  0 : bs(11, C, Y) =  2

 820 REM shape 12
 821 bs(12, A, X) = -1 : bs(12, A, Y) = -1
 822 bs(12, B, X) = -1 : bs(12, B, Y) =  0
 823 bs(12, C, X) =  1 : bs(12, C, Y) =  0

 830 REM shape 13
 831 bs(13, A, X) =  0 : bs(13, A, Y) = -1
 832 bs(13, B, X) =  1 : bs(13, B, Y) = -1
 833 bs(13, C, X) =  0 : bs(13, C, Y) =  1

 840 REM shape 14
 841 bs(14, A, X) = -1 : bs(14, A, Y) =  0
 842 bs(14, B, X) =  1 : bs(14, B, Y) =  0
 843 bs(14, C, X) =  1 : bs(14, C, Y) =  1

 850 REM shape 15
 851 bs(15, A, X) = -1 : bs(15, A, Y) =  0
 852 bs(15, B, X) =  1 : bs(15, B, Y) =  0
 853 bs(15, C, X) = -1 : bs(15, C, Y) =  1

 860 REM shape 16
 861 bs(16, A, X) = -1 : bs(16, A, Y) = -1
 862 bs(16, B, X) =  0 : bs(16, B, Y) = -1
 863 bs(16, C, X) =  0 : bs(16, C, Y) =  1

 870 REM shape 17
 871 bs(17, A, X) =  1 : bs(17, A, Y) = -1
 872 bs(17, B, X) = -1 : bs(17, B, Y) =  0
 873 bs(17, C, X) =  1 : bs(17, C, Y) =  0

 880 REM shape 18
 881 bs(18, A, X) =  0 : bs(18, A, Y) = -1
 882 bs(18, B, X) =  1 : bs(18, B, Y) =  0
 883 bs(18, C, X) =  1 : bs(18, C, Y) =  1

 890 REM shape 19
 891 bs(19, A, X) =  0 : bs(19, A, Y) = -1
 892 bs(19, B, X) = -1 : bs(19, B, Y) =  0
 893 bs(19, C, X) = -1 : bs(19, C, Y) =  1

 900 REM mapping from shape to colour
 901 data 0, 1, 9, 3, 4, 12, 2, 14, 1, 1, 1, 9, 4, 4, 4, 12, 12, 12, 2, 14
 902 for i=0 to 19: read cl(i): next

 910 REM Prime occ grid by setting the edges to 1, except for the top
 911 for x=0 to 11:
 912     REM top is open, also because of how we handle clearing rows
 913     occ(x, 21) = 1
 914 next x
 915 for y=0 to 21:
 916     occ( 0, y) = 1
 917     occ(11, y) = 1
 918 next y

 920 REM points for number of rows cleared
 921 pnts(0) = 0
 922 pnts(1) = 40
 923 pnts(2) = 100
 924 pnts(3) = 300
 925 pnts(4) = 1200

1000 REM MAIN
1001 home
1002 gr

1010 REM DRAW TITLE
1011 color = 13
1012 REM x coordinates of pixels per row
1013 data 1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23
1014 data 2, 5, 10, 13, 15, 18, 21
1015 data 2, 5, 6, 10, 13, 14, 18, 21, 22, 23
1016 data 2, 5, 10, 13, 15, 18, 23
1017 data 2, 5, 6, 7, 10, 13, 15, 17, 18, 19, 21, 22, 23
1018 REM paint rows
1019 for i = 1 to 18
1020     read x
1021     plot x + 8, 2
1022 next
1023 for i = 1 to 7
1024     read x
1025     plot x + 8, 3
1026 next
1027 for i = 1 to 10
1028     read x
1029     plot x + 8, 4
1030 next
1031 for i = 1 to 7
1032     read x
1033     plot x + 8, 5
1034 next
1035 for i = 1 to 13
1036     read x
1037     plot x + 8, 6
1038 next


1100 REM DRAW FRAME
1101 color = 14
1102 hlin fn gx(0), fn gx(11) at fn gy(0)
1103 hlin fn gx(0), fn gx(11) at fn gy(21)
1104 vlin fn gy(0), fn gy(21) at fn gx(0)
1105 vlin fn gy(0), fn gy(21) at fn gx(11)

1110 REM DRAW PREVIEW FRAME
1111 color = 10
1112 hlin fn gx(17), fn gx(23) at fn gy(16)
1113 hlin fn gx(17), fn gx(23) at fn gy(23)
1114 vlin fn gy(16), fn gy(23) at fn gx(17)
1115 vlin fn gy(16), fn gy(23) at fn gx(23)


1150 REM main loop
1151 htab 12: vtab 24: print "MOVE: < >  ROTATE: C X"
1152 htab 33: vtab 21: print "NEXT"
1160 gosub 1700: REM NEXTBLOCK
1161 REM check for collision. game over if block collides after spawning
1162 gosub 1900
1163 if col > 0 then goto 1400
1164 HTAB 16: vtab 21: print "SCORE ";scr
1170 gosub 1800: REM DRAW
1171 for dt = 1 to 1
1172     gosub 1600
1173     if key = 136 then gosub 2100
1174     if key = 149 then gosub 2120
1175     if key = 195 then gosub 2140
1176     if key = 216 then gosub 2160
1177 next
1178 gosub 1805: REM CLEAR
1179 by = by + 1
1180 gosub 1900: REM CHECK COLLISION
1181 if col = 0 then goto 1170: REM no collision, continue with next loop
1182 REM else: revert downwards movement
1183 by = by - 1
1184 REM redraw the block in the old position
1185 gosub 1800
1186 REM place the block
1187 gosub 2000
1188 REM pick the next block
1189 goto 1160

1400 REM GAME OVER
1401 home
1402 htab 16: vtab 21: print "GAME OVER"
1403 htab 12: vtab 23: print "FINAL SCORE: ";scr
1404 gosub 1610
1499 end

1500 REM SUBS
1501 REM GETKEY         1600
1502 REM WAITKEY        1610
1503 REM NEXTBLOCK      1700
1504 REM DRAW           1800
1505 REM CLEAR          1805
1506 REM COLLISION      1900
1507 REM PLACE BLOCK    2000
1508 REM MOVE LEFT      2100
1509 REM MOVE RIGHT     2120
1510 REM ROT CW         2140
1511 REM ROT CCW        2160

1600 REM GETKEY
1601 key=peek(49152)
1602 poke 49168, 0
1603 return

1610 REM WAITKEY
1611 key=peek(49152): if key<128 then 1611
1612 poke 49168, 0
1613 return

1700 REM NEXTBLOCK
1701 REM picks the next block at random and update the preview
1702 REM the very first time this function is called, no nblock is defined yet.
1703 if nblock = 0 then nblock = int(rnd(4) * 7 + 1)
1704 REM the preview is drawn at: (relative to grid)
1705 bx = 20: by = 20
1706 REM set the current block to the next block
1707 block = nblock
1708 REM remove the preview of the next block
1709 gosub 1805
1710 REM pick the next block
1711 nblock = int(rnd(4) * 7 + 1)
1712 REM draw a preview of the next block
1713 REM for this we temporarily set block to the next block,
1714 REM storing the actual block in a temporary variable.
1715 tmp = block
1716 block = nblock
1717 gosub 1800
1718 REM set the block back to the actual block
1719 block = tmp
1720 REM set the block position to the start position
1721 bx = 4
1722 by = 2
1723 return

1800 REM DRAW
1801 mask = 1: goto 1810

1805 REM CLEAR
1806 mask = 0: goto 1810

1810 REM DRAW SHAPE
1811 color = cl(block) * mask
1812 plot fn gx(bx), fn gy(by)
1813 plot fn gx(bx + bs(block, 0, 0)), fn gy(by + bs(block, 0, 1))
1814 plot fn gx(bx + bs(block, 1, 0)), fn gy(by + bs(block, 1, 1))
1815 plot fn gx(bx + bs(block, 2, 0)), fn gy(by + bs(block, 2, 1))
1816 return

1900 REM COLLISION CHECK
1901 REM for the collision check, we go through all cubes of the shape
1902 REM and check if any of them overlap with a cube in the current grid
1903 col = 0
1904 col = col + occ(bx, by)
1905 col = col + occ(bx + bs(block, 0, 0), by + bs(block, 0, 1))
1906 col = col + occ(bx + bs(block, 1, 0), by + bs(block, 1, 1))
1907 col = col + occ(bx + bs(block, 2, 0), by + bs(block, 2, 1))
1908
1909 return

2000 REM PLACE BLOCK
2001 REM Update shape in occ grid
2002 occ(bx, by) = 1
2003 occ(bx + bs(block, 0, 0), by + bs(block, 0, 1)) = 1
2004 occ(bx + bs(block, 1, 0), by + bs(block, 1, 1)) = 1
2005 occ(bx + bs(block, 2, 0), by + bs(block, 2, 1)) = 1
2006 REM update the fill score for those rows
2007 fill(by) = fill(by) + 1
2008 fill(by + bs(block, 0, 1)) = fill(by + bs(block, 0, 1)) + 1
2009 fill(by + bs(block, 1, 1)) = fill(by + bs(block, 1, 1)) + 1
2010 fill(by + bs(block, 2, 1)) = fill(by + bs(block, 2, 1)) + 1
2011 REM count the number of cleared rows
2012 nrows = 0
2013 for y=2 to 20
2014     if fill(y) < 10 then goto 2034
2015     REM row is full
2016     nrows = nrows + 1
2017     REM shift higher rows down
2018     for y1=y to 2 step -1
2019         REM finish the loop when theres nothing more to clear
2020         if fill(y1) = 0 then goto 2033
2021         REM this will read from row 0 for the top grid row,
2022         REM which is always 0
2023         fill(y1) = fill(y1 - 1)
2024         REM copy grid and occ grid
2025         for x=1 to 10
2026             color = scrn(fn gx(x), fn gy(y1 - 1))
2027             plot fn gx(x), fn gy(y1)
2028             REM copy occ grid. note that the top row has to be clear
2029             REM for this to work, otherwise we would always shift
2030             REM in a full row from the top.
2031             occ(x, y1) = occ(x, y1 - 1)
2032         next
2033     next
2034 next
2035 scr = scr + pnts(nrows)
2036 return

2100 REM MOVE LEFT
2101 REM move block to the left
2102 bx = bx - 1
2103 REM check collision
2104 gosub 1900
2105 REM revert to old block position
2106 bx = bx + 1
2107 REM if collision: return
2108 if col > 0 then return
2109 REM else: clear old current shape
2110 gosub 1805
2111 REM then update block position
2112 bx = bx - 1
2113 REM and redraw
2114 gosub 1800
2115 return

2120 REM MOVE RIGHT
2121 REM move block to the right
2122 bx = bx + 1
2123 REM check collision
2124 gosub 1900
2125 REM revert to old block position
2126 bx = bx - 1
2127 REM if collision: return
2128 if col > 0 then return
2129 REM else: clear old current shape
2130 gosub 1805
2131 REM then update block position
2132 bx = bx + 1
2133 REM and redraw
2134 gosub 1800
2135 return

2140 REM ROTATE CLOCKWISE
2141 REM update shape
2142 block = bc(block)
2143 REM check collision
2144 gosub 1900
2145 REM revert to old block
2146 block = bx(block)
2147 REM if collision: return
2148 if col > 0 then return
2149 REM else: clear old current shape
2150 gosub 1805
2151 REM then update block
2152 block = bc(block)
2153 REM and redraw
2154 gosub 1800
2155 return

2160 REM ROTATE COUNTERCLOCKWISE
2161 REM update shape
2162 block = bx(block)
2163 REM check collision
2164 gosub 1900
2165 REM revert to old block
2166 block = bc(block)
2167 REM if collision: return
2168 if col > 0 then return
2169 REM else: clear old current shape
2170 gosub 1805
2171 REM then update block
2172 block = bx(block)
2173 REM and redraw
2174 gosub 1800
2175 return

